@inject IApplicationThemeService ApplicationThemeService
@inject ISyncLocalStorageService SyncLocalStorageService
@inject IBrowserService BrowserService

<CascadingAuthenticationState>
    <CascadingValue Name="Theme" Value="Theme">
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</CascadingAuthenticationState>

@code {
    [CascadingParameter(Name="Theme")]
    private Theme Theme { get; set; }

    /// <summary>
    /// Entry point
    /// </summary>
    /// <returns></returns>
    protected override void OnInitialized()
    {
        // cascade value
        Theme = ApplicationThemeService.Theme;
        Theme.PropertyChanged += ThemeOnPropertyChanged;

        Console.WriteLine($"{DateTime.UtcNow.ToString("dd/MM/yyyy HH:mm:ss.fff")}|{nameof(App)}|{nameof(OnInitialized)}|{Theme.Organization}");
    }

    protected override async Task OnInitializedAsync()
    {
        // browser
        var dimensions = await BrowserService.Initialize();
        var value = $"[{dimensions.Width}x{dimensions.Height}]";
        SyncLocalStorageService.SetItemAsString(LocalStorageConstants.BrowserDimensionsKey, value);
        Console.WriteLine($"{DateTime.UtcNow.ToString("dd/MM/yyyy HH:mm:ss.fff")}|{nameof(App)}|{nameof(OnInitializedAsync)}|{value}");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"{DateTime.UtcNow.ToString("dd/MM/yyyy HH:mm:ss.fff")}|{nameof(App)}|{nameof(OnAfterRender)}|{firstRender}");
        base.OnAfterRender(firstRender);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"{DateTime.UtcNow.ToString("dd/MM/yyyy HH:mm:ss.fff")}|{nameof(App)}|{nameof(OnAfterRenderAsync)}|{firstRender}");
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"{DateTime.UtcNow.ToString("dd/MM/yyyy HH:mm:ss.fff")}|{nameof(App)}|{nameof(OnParametersSet)}|{string.Empty}");
        base.OnParametersSet();
    }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine($"{DateTime.UtcNow.ToString("dd/MM/yyyy HH:mm:ss.fff")}|{nameof(App)}|{nameof(OnParametersSetAsync)}|{string.Empty}");
        return base.OnParametersSetAsync();
    }

    public override Task SetParametersAsync(ParameterView parameters)
    {
        Console.WriteLine($"{DateTime.UtcNow.ToString("dd/MM/yyyy HH:mm:ss.fff")}|{nameof(App)}|{nameof(SetParametersAsync)}|{string.Empty}");
        return base.SetParametersAsync(parameters);
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine($"{DateTime.UtcNow.ToString("dd/MM/yyyy HH:mm:ss.fff")}|{nameof(App)}|{nameof(ShouldRender)}|{string.Empty}");
        return base.ShouldRender();
    }
    private void ThemeOnPropertyChanged(object? sender, PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }
}
