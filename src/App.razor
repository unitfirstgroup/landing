@inject IApplicationThemeService ApplicationThemeService
@inject ISyncLocalStorageService SyncLocalStorageService
@inject IBrowserService BrowserService

<CascadingAuthenticationState>
    <CascadingValue Name="Theme" Value="Theme">
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</CascadingAuthenticationState>

@code {
    [CascadingParameter(Name="Theme")]
    private Theme Theme { get; set; }

    /// <summary>
    /// Entry point
    /// </summary>
    /// <returns></returns>
    protected override void OnInitialized()
    {
        // cascade value
        Theme = ApplicationThemeService.LoadTheme();
        Console.WriteLine($@"{DateTime.UtcNow.ToDateTimeString()}|{nameof(App)}|{nameof(OnInitialized)}|{Theme.Organization}");
    }

    protected override async Task OnInitializedAsync()
    {
        // browser init
        await BrowserService.Initialize();
       
        // dimensions
        var dimensions = await BrowserService.GetDimensions();
        var value = $"[{dimensions.Width}x{dimensions.Height}]";
        SyncLocalStorageService.SetItemAsString(LocalStorageConstants.BrowserDimensionsKey, value);

        //
        Console.WriteLine($@"{DateTime.UtcNow.ToDateTimeString()}|{nameof(App)}|{nameof(OnInitializedAsync)}|Dimensions: {value}");
    }
}
