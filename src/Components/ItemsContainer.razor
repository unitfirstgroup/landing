@typeparam TItem

<div class="items-center justify-center px-2 py-4 text-center lg:px-24">
        
    <div class="flex justify-center px-4 py-2 md:px-10">
        <SearchInput
            SearchModel="@Filter.SearchModel">
        </SearchInput>
    </div>

    <div class="grid w-full grid-cols-3 gap-4 p-4 md:p-10 md:grid-cols-8">
        @foreach (var item in @Filter.Tags)
        {
            <ToggleButton
                Text="@item.TagName"
                RaiseSearchCommand="@Filter.SearchModel.RaiseSearchCommand"
                Select="@item.Select">
            </ToggleButton>
        }
    </div>
    <div class="grid w-full grid-cols-1 gap-8 md:p-10 md:grid-cols-4">
        @foreach (TItem item in @Items)
        {
            @ChildContent(item)
        }
    </div>
</div>

@code {

    protected override Task OnInitializedAsync()
    {
        Filter.SearchModel.PropertyChanged += OnSearchInputChanged;
        return base.OnInitializedAsync();
    }

    private void OnSearchInputChanged(object? sender, PropertyChangedEventArgs e)
    {
        Filter.SearchModel.RaiseSearchCommand.Execute(null);
    }

    [Parameter]
    public ObservableCollection<TItem> Items { get; set; }

    [Parameter]
    public RenderFragment<TItem> ChildContent { get; set; }

    [Parameter]
    public FilterModel Filter { get; set; }

}